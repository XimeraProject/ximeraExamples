%%
%% This is file `ximera.cfg',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% ximera.dtx  (with options: `cfgXimera')
%% src/pagesetup.dtx  (with options: `cfgXimera')
%% src/packages.dtx  (with options: `cfgXimera')
%% src/jax.dtx  (with options: `cfgXimera')
%% src/sectioning.dtx  (with options: `cfgXimera')
%% src/title.dtx  (with options: `cfgXimera')
%% src/abstract.dtx  (with options: `cfgXimera')
%% src/image.dtx  (with options: `cfgXimera')
%% src/outcomes.dtx  (with options: `cfgXimera')
%% src/textcolor.dtx  (with options: `cfgXimera')
%% src/verbatim.dtx  (with options: `cfgXimera')
%% src/html.dtx  (with options: `cfgXimera')
%% src/ending.dtx  (with options: `cfgXimera')
%% ------------:| ------------------------------------------------------------
%%       ximera:| Simultaneously writing print and online interactive materials
%%       Author:| Jim Fowler and Oscar Levin and Jason Nowell and Wim Obbels and Hans Parshall and Bart Snapp and Jeffrey Kuan
%%       E-mail:| bart.snapp@gmail.com
%%      License:| Released under the LaTeX Project Public License v1.3c or later
%%          See:| http://www.latex-project.org/lppl.txt
%% 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\Preamble{xhtml,mathjax}

\ExplSyntaxOn
% Get the value of rowhead key and save it in the \lTblrRowHeadInt for later use
\def\xmtabsetrowhead{
    \int_set:Nn \lTblrRowHeadInt   { \__tblr_prop_item:ne { inner } { rowhead } + 0 }
}

% Get the value of xmcolhead key and save it in the \lTblrxmColHeadInt for later use 
%   \lTblrxmColDiffInt is the difference in location between the column header and the actual column
\def\xmtabsetcellinfo{
    \int_set:Nn \lTblrxmColHeadInt { \__tblr_prop_item:ne { inner } { xmcolhead } + 0 }
    \int_set:Nn \lTblrxmColDiffInt { \HCol - \lTblrxmColHeadInt   }
    \int_set:Nn \lTblrxmRowDiffInt { \HRow - \lTblrRowHeadInt   }
}

\makeatletter

\def\xmtaboutput{\@arabic\lTblrxmColGroupCheck}
\def\xmtabcolgroupcheck{
  \ifnum\lTblrxmColGroupCheck>0
    \space % test="\xmtaboutput" \space
  \else
    \space
  \fi
}

% print either th with scope or td ... 
\def\xmtabtestcell{  
    \ifnum\lTblrxmColDiffInt<1
      \ifnum\lTblrxmRowDiffInt<1
        td
      \else
        \ifnum\HRowspan>1
          th \space scope="rowgroup"
        \else
          th \space scope="row"
        \fi
      \fi
    \else 
      \ifnum\lTblrxmRowDiffInt<1
        \ifnum\HMultispan>1
          th \space scope="colgroup"
        \else 
          th \space scope="col"
        \fi
      \else
        td
      \fi
    \fi
}

\def\xmtabtestcelltag{  
    \ifnum\lTblrxmColDiffInt<1
      \ifnum\lTblrxmRowDiffInt<1
        td
      \else
        th
      \fi
    \else 
      \ifnum\lTblrxmRowDiffInt<1
        th
      \else
        td
      \fi
    \fi
}

%% \def\xmtabtestcheck{
%%   \ifnum\myInteger>0
%%     test="taylor swift" \space
%%   \else
%%     \space
%%   \fi
%% }
%%

\xdef\HMultispan{\@arabic\lTblrCellColSpanInt}

\cs_new:Npn \l__tblr_testing_func_three:n #1
{
  \tl_set:Nn \l__tblr_colgroup_tl { <col>> }
  \int_set:Nn \l__tlbr_number_cols_int { \c@colcount }
  \int_step_variable:nNn { 1 } \l__tblr_A_tl  % this checks the first row for colhead, I don't think we should support colhead in the second row
  {
  \int_step_variable:nNn {\l__tlbr_number_cols_int } \l__tblr_z_tl  
  {
    \tl_set:Nn \ColSpanEx_tl
          {
            \__tblr_data_item:neen { cell } { \l__tblr_A_tl } { \l__tblr_z_tl } { colspan } %lines 942 to 951
          }  
  % \int_set:Nn \lTblrTestingInt {8000 + \lTblrxmColGroupCheck + #1}
    \int_set:Nn \lTblrTestingInt {\ColSpanEx_tl}  % currently this is an integer, if a later update is needed i think it's better as an integer than a string
    \ifnum\int_eval:n{\l__tblr_z_tl}>0            % this if statement is always true, it literally does nothing
      \prop_put:Nnn \l__tblr_testing_prop {\l__tblr_z_tl } {\lTblrTestingInt} 
      \prop_get_to_int:NnN \l__tblr_testing_prop { \l__tblr_z_tl  } \lTblrxmColGroupCheck
      \def\outputV{\@arabic\lTblrxmColGroupCheck }
      \tl_put_right:Ne \l__tblr_colgroup_tl { <colgroup \space span="\outputV"></colgroup> }
    \fi
  }
  }
}



\long\def\:tempa#1{
  \int_set:Nn \c@rownum {#1}\xdef\HRow{\@arabic\c@rownum}
  \int_step_function:nnnN { 13 } { 1 } {14} \l__tblr_testing_func_three:n
  %%%% \int_step_function:nnnN { 13 } { 1 } {14} \l__tblr_write_caption:
  %%%% \def\caption_string{\l__tblr_caption_str}
  \def\colgroup_string{\l__tblr_colgroup_tl}
  \def\outputV{\@arabic\lTblrxmColGroupCheck }
  %% <col> <colgroup \space span="\outputV"></colgroup>
  %%%%\ifnum\HRow=1
  %%%%  \HCode{ \colgroup_string <caption>\l__tblr_caption_str <span>\l__tblr_summary_str </span> </caption> } 
  %%%%\fi
  \c:tabularray\o:__tblr_build_row:N:{#1}\d:tabularray
  }
\HLet\__tblr_build_row:N\:tempa

\makeatother

\ExplSyntaxOff

% this is the configuration for the tabularray package with the support for <th>
\catcode`\:=11
\makeatletter
\Configure{tabularray}{%
  \ifvmode\IgnorePar\fi\EndP%
  \gHAdvance\Next:TableNo by 1 \global\let\TableNo=\Next:TableNo%
  \HCode{<table class="tabularray \@currenvir" id="tbl-\TableNo">}
}{\ifvmode\IgnorePar\fi\EndP\HCode{</table>}}
{\xmtabsetrowhead\HCode{<tr id="row-\TableNo-\HRow-">}}{\HCode{</tr>}}
{\xmtabsetcellinfo\HCode{<\xmtabtestcell\space\xmtabcolgroupcheck id="cell\TableNo-\HRow-\HCol" style="\CellStyle" \CellAttributes>}}{\HCode{</\xmtabtestcelltag>}}
%{\Configure{tabularrayattributes}{rowspan="\lTblrCellRowSpanInt"}}
%the line below cannot be deleted 
{\Configure{tabularrayattributes}{}}{}
\catcode`\:=12
\makeatother



\NoFonts




\Configure{@HEAD}{\HCode{<meta name="ximera" content="version 2.5.1" />\Hnewline}}
\Configure{@HEAD}{\HCode{<link href="https://ximera.osu.edu/public/stylesheets/standalone.css" rel="stylesheet" media="screen"/>\Hnewline}}
\Configure{@HEAD}{\HCode{<script type="text/javascript" async src="https://ximera.osu.edu/public/javascripts/standalone.min.js"></script>\Hnewline}}


\catcode`\%=11
\Configure{@BODY}{\HCode{<style>
.activity-body pre {
    white-space: pre;
    background-color: lightgray;
}
.xmyoutube {
    aspect-ratio: 16/9;
    min-width: 75%;
}
.image-environment img {
    width: unset;
}
</style>\Hnewline}}
\catcode`\%=14



\Configure{BVerbatimInput}{}{}{}{}

\Configure{verbatiminput}{}{}{}{}

\makeatletter
\def\FV@Space{\space}
\makeatother

\Configure{BODY}{%
\HCode{<body>\Hnewline}%
\Tg<div class="preamble">%
%% 202501: removed .jax inclusion  (see luaxake)

%% Include the .ids file
\IfFileExists{\jobname.ids}{\HCode{<script type="text/javascript">\Hnewline}%
\BVerbatimInput{\jobname.ids}%
\HCode{</script>\Hnewline}%
}{}
\Tg</div>%
}{%
\ifvmode\IgnorePar\fi\EndP\HCode{</body>\Hnewline}%
}


\ScriptEnv{matlabEquation}{\ifvmode \IgnorePar\fi \EndP\HCode{<script type="math/tex; mode=display"> \string\begin{equation}\Hnewline}\HtmlParOff}{\HtmlParOn\HCode{\string\end{equation}</script>}}

\renewcommand{\paragraph}[1]{%
  \HCode{<span class="paragraphHead">}%
  #1%
  \HCode{</span>}\par\IgnorePar}
\renewcommand{\subparagraph}[1]{%
  \HCode{<span class="subparagraphHead">}%
  #1%
  \HCode{</span>}\par\IgnorePar}

\ifvmode\IgnorePar\fi\EndP
\ConfigureEnv{abstract}{\ifvmode\IgnorePar\fi\EndP\HCode{\Hnewline<div class="abstract">}\par}{\ifvmode\IgnorePar\fi\EndP\HCode{\Hnewline</div>}\par}{}{}
%%  Although we accept many formats, SVG is preferred on the web.
%%  Since we have a different mechanism for producing |alt| text, we
%%  want to ignore tex4ht's own method fo producing alt text.
%%  2024: is now in TeX4ht ...
\ifcsname ifstandalone\endcsname
  \ifstandalone
    \renewcommand\includegraphics[2][]{}
  \fi
\renewcommand{\outcome}[1]{
  \Configure{@HEAD}{\HCode{<meta name="learning-outcome" content="#1"/>\Hnewline}}
}
\IfFileExists{\jobname.oc}{\input{\jobname.oc}}{}

\renewcommand{\outcome}[1]{%
  \HCode{<span class="learning-outcome">#1</span>}
}
\makeatletter
\Configure{textcolor}{\HCode{<span style="color:\#\tsf@color;">}}{\HCode{</span>}}
\let\oldtextcolor\textcolor

\renewcommand\textcolor[2]{%
  % we need to convert the current color to hexadecimal form usable in the style attribute
  % the \tsf@color macro is used in the \Configure{textcolor} configuration to insert the
  % CSS color
  \extractcolorspec{#1}{\tsf@color}%
  \expandafter\convertcolorspec\tsf@color{HTML}\tsf@color%
  % call the original command
  \oldtextcolor{#1}{#2}%
}%
\makeatother
\renewenvironment{javascriptCode}{\NoFonts}{\EndNoFonts}
\ScriptEnv{javascriptCode}{\stepcounter{identification}\ifvmode \IgnorePar\fi \EndP\HCode{<div class="javascript-code" id="javascript\arabic{identification}"><script type="text/text">}\HtmlParOff}{\HtmlParOn\HCode{\Hnewline</script></div>}}
%%% On the web, translate verbatim and lstlisting blocks into |<pre>|
%%% elements.
%%%    \begin{macrocode}
%%%<*cfgXimera>
%%\ConfigureEnv{verbatim}{\ifvmode\IgnorePar\fi\EndP\HCode{<pre style="white-space: pre; background-color: lightgray;" >}}{\ifvmode\IgnorePar\fi\EndP\HCode{</pre>}}{}{}
%%\ConfigureEnv{lstlisting}{\ifvmode\IgnorePar\fi\EndP\HCode{<pre>}}{\ifvmode\IgnorePar\fi\EndP\HCode{</pre>}}{}{}
%%%</cfgXimera>
%%%    \end{macrocode}
\Configure{textbf}{\ifvmode\ShowPar\fi\HCode{<strong>}}{\HCode{</strong>}}
\Configure{textit}{\ifvmode\ShowPar\fi\HCode{<em>}}{\HCode{</em>}}
\Configure{emph}{\ifvmode\ShowPar\fi\HCode{<em>}}{\HCode{</em>}}
\Configure{texttt}{\ifvmode\ShowPar\fi\HCode{<code>}}{\HCode{</code>}}


\begin{document}
\EndPreamble
%% 
%% Copyright (C) 2024 by Bart Snapp <bart.snapp@gmail.com> and Jim Fowler <kisonecat@gmail.com>
%% 
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License (LPPL), either
%% version 1.3c of this license or (at your option) any later
%% version.  The latest version of this license is in the file:
%% 
%% http://www.latex-project.org/lppl.txt
%% 
%% This work is "maintained" (as per LPPL maintenance status) by
%% Bart Snapp. The source code can be found at:
%% 
%% https://github.com/XimeraProject/ximeraLatex
%% 
%% This work consists of the file ximera.dtx, the associated files
%% under src/, and a Makefile.
%% 
%% Running "make" generates the derived files README, ximera.pdf, ximera.cls, xourse.cls.
%% 
%% Running "make inst" installs the files in the user's TeX tree.
%% 
%% Running "make install" installs the files in the local TeX tree.
%% 
%%
%% End of file `ximera.cfg'.
